<section
  class="md:h-screen bg-white dark:bg-gray-900 dark:text-gray-200"
  x-intersect.once="showCta = true; $el.classList.remove('md:h-screen')">
  <div
    class="dark:bg-gray-900 dark:text-gray-200"
    x-data="dataCta()"
    x-show="showCta"
    x-transition:enter="transition transform ease-out duration-1000 "
    x-transition:enter-start="opacity-0 translate-y-full"
    x-transition:enter-end="opacity-100 translate-y-0">
    <div class="z-50 max-w-7xl mx-auto py-12 px-4 sm:px-6 lg:py-16 lg:px-8 lg:flex lg:items-center lg:justify-between dark:bg-gray-900
        dark:text-gray-200 ">
      <h2 class="text-3xl font-extrabold tracking-tight text-gray-900 sm:text-4xl mr-5">
        <span class="block dark:text-gray-200">Want to make a donation?</span>
        <span class="block text-indigo-600">
          You can even buy me a coffee or make a payment.
        </span>
      </h2>
      <div class="mt-8 flex lg:mt-0 lg:flex-shrink-0 ">
        <div x-data="{symbol: '$'}">
          <label for="amount" class="text-sm font-medium text-gray-700 hidden">
            Amount
          </label>
          <div class="relative">
            <div class=" absolute -inset-0.5 bg-gray-200 dark:bg-gray-700 rounded-md blur"></div>
            {# <div class=" absolute inset-y-0 left-0 ml-3 pl-2 flex items-center pointer-events-none ">
              <span class="text-gray-500 text-base font-medium" x-text="symbol"></span>
            </div> #}
            <input
              x-model.number="amount"
              type="text"
              name="amount"
              id="amount"
              class="relative dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 mx-1 inline-flex items-center justify-center px-4 py-3
                border text-base font-medium rounded-md text-indigo-600 bg-white hover:bg-indigo-50 border-gray-300 "
              placeholder="0.00"/>
            <div class="absolute inset-y-0 right-0 flex items-center">
              <label for="currency" class="sr-only">Currency</label>
              <select
                x-model="currency"
                @change="symbol = document.querySelector(`#${event.target.id} option:checked`).dataset.symbol"
                id="currency"
                name="currency"
                class=" focus:ring-indigo-500 focus:border-indigo-500 h-full py-0 pl-2 pr-7 border-transparent bg-transparent
                  text-gray-500 text-base font-medium rounded-md ">
                <option data-symbol="$" data-placeholder="0.00">USD</option>
                <option data-symbol="€" data-placeholder="0.00">EUR</option>
                <option data-symbol="£" data-placeholder="0.00">GBP</option>
                <option data-symbol="¥" data-placeholder="0.00">JPY</option>
                <option data-symbol="$" data-placeholder="0.00">CAD</option>
                <option data-symbol="$" data-placeholder="0.00">AUD</option>
                <option data-symbol="F" data-placeholder="0.00">CHF</option>
                <option data-symbol="₹" data-placeholder="0.00">INR</option>
                <option data-symbol="元" data-placeholder="0.00">CNY</option>
                <option data-symbol="R" data-placeholder="0.00">BRL</option>
              </select>
            </div>
          </div>
        </div>
        <div class="inline-flex rounded-md shadow relative ml-3 ">
          <div class=" absolute -inset-0.5 bg-indigo-600 dark:bg-indigo-500 rounded-md blur"></div>
          <button
            @click="pay"
            id="donate-button"
            class="relative inline-flex items-center justify-center px-5 py-3 border border-indigo-500 text-base font-medium rounded-md
              text-white bg-indigo-600 hover:bg-indigo-700">
            <!-- <template x-if="!isFetching && !(document.getElementById('pay-button') || false)" > <span
            id="pay-button">Pay</span> </template> -->
            <span x-show="!isFetching" id="pay-button">Pay</span>
            <!-- <template x-if="isFetching"> -->
              <div x-show="isFetching" id="wait-button" class="inline-flex items-center">
                <span x-show="!isMobile()">Please Wait</span>
            <svg
              class="animate-spin h-5 w-5 sm:ml-2 text-white"
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24">
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              <path
                class="opacity-75"
                fill="currentColor"
                d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            </div>
            <!-- </template> -->
          </button>
        </div>
      </div>
    </div>
  </div>
  <script>
    function loadScript(src) {
      return new Promise(function (resolve, reject) {
        var s
        s = document.createElement('script')
        s.src = src
        s.onload = resolve
        s.onerror = reject
        if (document.body == null) {
          document.head.appendChild(s)
        } else {
          document.body.appendChild(s)
        }
      })
    }
    function dataCta() {
      return {
        isFetching: false,
        // isPresent: false,
        amount: (Math.random() * 100).toFixed(2),
        currency: 'USD',
        stripe: null,
        async pay() { // typeof plausible !== 'undefined' && plausible('Donated')
          this.registerEvent('donate', 'click')
          
          await loadScript('https://js.stripe.com/v3')
          this.stripe = Stripe('{{ env.stripeKey }}')
          var purchase = {
            amount: this.amount,
            currency: this.currency
          }
          this.isFetching = true
          fetch('/api/payment', { // fetch('/.netlify/functions/payment', { fetch('{{env.apiUrl}}' + '/payment', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(purchase)
          })
            .then((response) => response.json())
            .then((session) => {
              this.stripe.redirectToCheckout({sessionId: session.id})
            })
            .then(function (result) {
              if (result.error) {
                console.error('Error:', result.error.message)
              }
            })
            .catch(function (error) {
              console.error('Error:', error)
            })
        }
      }
    }
  </script>
</section>