<div
    class="relative z-[500]"
    aria-labelledby="modal-title"
    role="dialog"
    aria-modal="true"
    x-show="showCodeExitPopup"
    x-cloak="x-cloak">
  <!-- Background backdrop, show/hide based on modal state.
    
    Entering: "ease-out duration-300"
        From: "opacity-0"
        To: "opacity-100"
    Leaving: "ease-in duration-200"
        From: "opacity-100"
        To: "opacity-0" -->
  <div
        x-show="showCodeExitPopup"
        x-transition:enter=" ease-out duration-300 "
        x-transition:enter-start="opacity-0 "
        x-transition:enter-end="opacity-100  "
        x-transition:leave=" ease-in duration-200 "
        x-transition:leave-start="opacity-100 "
        x-transition:leave-end="opacity-0 "
        class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity"></div>
  <div class="fixed z-10 inset-0 overflow-y-auto">
    <div
            class="flex items-end sm:items-center justify-center min-h-full p-4 text-center sm:p-0">
      <!-- Modal panel, show/hide based on modal state.
            
            Entering: "ease-out duration-300"
                From: "opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
                To: "opacity-100 translate-y-0 sm:scale-100"
            Leaving: "ease-in duration-200"
                From: "opacity-100 translate-y-0 sm:scale-100"
                To: "opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95" -->
      <div
                @click.outside="showCodeExitPopup = false"
                x-show="showCodeExitPopup"
                x-transition:enter=" ease-out duration-300 "
                x-transition:enter-start="opacity-0 translate-y-4 md:translate-y-0 md:scale-95 "
                x-transition:enter-end="opacity-100 translate-y-0 md:scale-100  "
                x-transition:leave=" ease-in duration-200 "
                x-transition:leave-start="opacity-100 translate-y-0 md:scale-100 "
                x-transition:leave-end="opacity-0 translate-y-4 md:translate-y-0 md:scale-95 "
                class="relative bg-white rounded-lg px-4 pt-5 pb-4 text-left overflow-hidden shadow-xl transform transition-all sm:my-8
                    sm:max-w-sm sm:w-full sm:p-6 dark:bg-gray-800">
        <form @submit.prevent="submitFeedback" x-data="dataFeedback">
          <div>
            <div
                        class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-green-100 dark:bg-green-900">
              <svg
                            xmlns="http://www.w3.org/2000/svg"
                            class="h-6 w-6 text-green-600"
                            fill="none"
                            viewBox="0 0 24 24"
                            stroke="currentColor"
                            stroke-width="2">
                <path
                                stroke-linecap="round"
                                stroke-linejoin="round"
                                d="M12 4v1m6 11h2m-6 0h-2v4m0-11v3m0 0h.01M12 12h4.01M16 20h4M4 12h4m12 0h.01M5 8h2a1 1 0 001-1V5a1 1 0 00-1-1H5a1 1 0
                                    00-1 1v2a1 1 0 001 1zm12 0h2a1 1 0 001-1V5a1 1 0 00-1-1h-2a1 1 0 00-1 1v2a1 1 0 001 1zM5 20h2a1 1 0 001-1v-2a1 1 0
                                    00-1-1H5a1 1 0 00-1 1v2a1 1 0 001 1z"/>
              </svg>
            </div>
            <div class="mt-3 sm:mt-5">
              <h3 class="text-center text-lg leading-6 font-medium text-gray-900 dark:text-gray-50" id="modal-title">Before you leave</h3>
              <div class="mt-1 mx-2">
                <fieldset>
                  <legend class="text-center text-sm text-gray-500 dark:text-gray-400">We are genuinely sorry to see you go. In an effort to improve, we would greatly appreciate your input on the factors contributing to your departure.</legend>
                  {# <legend class="text-sm font-semibold leading-6 text-gray-900">We're sorry to see you go! What's your reason for leaving?</legend> #}
                  <div class="mt-6 space-y-1">
                    <template x-for="(checked, index) in reason" :key="index">
                      <div>
                        <div class="relative flex gap-x-3">
                          <div class="flex h-6 items-center">
                            <input :value="labelForIndex(index)" x-model="reason[index]" :id="reason + (index + 1)" :name="reason + (index + 1)" type="checkbox" class="h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-600">
                          </div>
                          <div class="text-sm leading-6">
                            <label :for="reason + (index + 1)" class="font-medium text-gray-900 dark:text-gray-100" x-text="labelForIndex(index)"></label>
                            <p class="text-gray-500 dark:text-gray-400" x-text="descriptionForIndex(index)"></p>
                          </div>
                        </div>
                        <template x-if="checked && index === 4">
                          <div class="">
                            <label for="comment" class="block text-sm font-medium text-gray-700 dark:text-gray-400"> Add your comment </label>
                            <div class="mt-1">
                              <textarea x-model="comment" rows="1" name="comment" id="comment" class="block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 dark:border-gray-700 dark:bg-gray-800 dark:text-gray-400 sm:text-sm"></textarea>
                              <p class="mt-2 text-sm text-gray-500 dark:text-gray-200">
                                <span>Please tell us what in one short sentence.</span>
                              </p>
                            </div>
                          </div>
                        </template>
                      </div>
                    </template>
                  </div>
                </fieldset>
              </div>
            </div>
          </div>
          <div class="mt-5 sm:mt-6">
            <button type="submit" :disabled="filterCheckboxValues().length === 0" :class="filterCheckboxValues().length === 0 ? 'opacity-50' : ''"
                        class="inline-flex justify-center w-full rounded-md border border-transparent shadow-sm px-4 py-2 bg-indigo-600 text-base
                            font-medium text-white hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500
                            sm:text-sm">
                        Close</button>
            {# <button @click="showCodeExitPopup = !showCodeExitPopup" type="button"
                        class="inline-flex justify-center w-full rounded-md border border-transparent shadow-sm px-4 py-2 bg-indigo-600 text-base
                            font-medium text-white hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500
                            sm:text-sm">
                        Close</button> #}
          </div>
        </form>
      </div>
    </div>
  </div>
</div>
<script>
  function dataFeedback() {
    return {

      comment: '',
      reason: [
        false, false, false, false, false
      ],

      labelForIndex(index) {
        const labels = ['Information', 'Price', 'Expectations', 'Difficulty', 'Other'];
        return labels[index] || 'Unknown';
      },

      descriptionForIndex(index) {
        const descriptions = ["I didn't have enough information.", "It was too expensive for me.", "I didn't find what I was looking for.", "I didn't find the website easy to use.", "Something else bothered me."];
        return descriptions[index] || '';
      },

      filterCheckboxValues() {
        const selectedReasons = this
          .reason
          .map((checked, index) => (
            checked
            ? {
              label: this.labelForIndex(index),
              description: this.descriptionForIndex(index)
            }
            : null))
          .filter((value) => value !== null);
        //        console.log(selectedReasons);
        return selectedReasons
      },

      isShortSentence(str) {
        // Remove leading and trailing whitespace
        str = str.trim();

        // Check if the string ends with a period and contains only a few words
        return str.endsWith('.') && str
          .split(' ')
          .length <= 7;
      },

      submitFeedback() {
        this.registerEvent('feedback', 'click')

        const reasons = this.filterCheckboxValues()
        fetch('/api/feedback', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({reasons: reasons, comment: this.comment})
        })
          .then((response) => {
            if (response.ok) {
              // Handle a successful response (e.g., show a success message)
              this.status = 'Feedback successful'
              this.details = 'Your feedback has been received and is greatly appreciated.'
              this.success = true
              //console.log('Feedback submitted successfully');
            } else {
              // Handle an error response (e.g., show an error message)
              this.status = 'Feedback failed'
              this.details = 'It is possible that there could be an issue with either the database or the code.'
              this.success = false
              //console.error('Failed to submit feedback');
            }
            this.showNotification = true
            setTimeout(() => this.isShowExitPopupQuiz = true, 2000);

          })
          .catch((error) => {
            // Handle any network or request-related errors
            this.status = 'Feedback failed'
            this.details = 'It is possible that there could be an issue with either the database or the code.'
            this.success = false
            console.error('Error:', error);
          });

        // Close the feedback modal
        this.showCodeExitPopup = false;
      }
    }
  }
</script>