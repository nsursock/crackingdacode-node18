<div
  class="flex flex-col h-4/5"
  x-data="
  {
  values: [],
  note: null,

  randomFill(amount, min, max) {
    const arr = [];
    let total = 0;

    // fill an array with random numbers
    for (let i = 0; i < amount; i++) arr.push((min + Math.random() * (max - min))*(5-i));

    // add up all the numbers
    for (let i = 0; i < amount; i++) total += arr[i];

    // normalise so numbers add up to 1
    for (let i = 0; i < amount; i++) arr[i] /= total;

    return arr;
}
}"
  x-init="values = randomFill(5, 0, 1); note = (values.reduce((p,c,i) => (5-i)*c*100 + p, 0)/100).toFixed(2)"
>
  <div class="flex flex-col items-center h-1/5">
    <div class="flex items-center">
      <template x-for="(value, index) in values">
        <div class="relative">
          <svg
            aria-hidden="true"
            class="w-10 h-10"
            :class="note < index+1 ? 'text-gray-400 dark:text-gray-500' : 'text-indigo-400'"
            fill="currentColor"
            viewBox="0 0 20 20"
            xmlns="http://www.w3.org/2000/svg"
          >
            <title>Star <span x-text="index"></span></title>
            <path
              d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"
            ></path>
          </svg>
          <template x-if="note > index && note < index+1">
            <div
              class="absolute inset-0 z-10 h-10 bg-indigo-400 mix-blend-overlay"
              :style="`width: ${note.toString().split('.')[1]}%`"
            ></div>
          </template>
        </div>
      </template>
    </div>
    <div class="flex">
      <p class="ml-2 text-sm font-medium text-gray-900 dark:text-white">
        <span x-text="note"></span>
        out of 5
      </p>
      <p class="ml-2 text-sm font-medium text-gray-500 dark:text-gray-400">
        <span
          x-text="`(${(Math.random() * 1000 + 500).toFixed()} votes)`"
        ></span>
      </p>
    </div>
  </div>

  <div class="flex flex-grow">
    <!-- This example requires Tailwind CSS v2.0+ -->
    <template x-for="(value, index) in values">
      <div class="h-full flex-1 mx-3 my-2">
        <h4 class="sr-only">Rating</h4>
        <div
          class="flex flex-col items-center justify-center h-full space-y-2"
          aria-hidden="true"
        >
          <!-- indicator -->
          <div class="inline-flex items-center">
            <span
              class="text-sm font-medium text-gray-900"
              x-text="`${5-index}`"
            ></span>
            <svg
              aria-hidden="true"
              class="w-5 h-5 text-gray-900 mb-1"
              fill="currentColor"
              viewBox="0 0 20 20"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"
              ></path>
            </svg>
          </div>
          <!-- bar -->
          <div class="bg-gray-200 rounded-md overflow-hidden flex-grow w-full">
            <div
              class="bg-indigo-600"
              :style="`height: ${value*100}%`"
            ></div>
          </div>
          <!-- percentage -->
          <span
            class="text-sm font-medium text-gray-900"
            x-text="`${(value*100).toFixed()}%`"
          ></span>
        </div>
      </div>
    </template>
  </div>
</div>

<div class="h-1/5">
  <div class="flex justify-center items-center">
    <div
      x-data="
{
  rating: 0,
  hoverRating: 0,
  ratings: [{'amount': 1, 'label':'Terrible'}, {'amount': 2, 'label':'Bad'}, {'amount': 3, 'label':'Okay'}, {'amount': 4, 'label':'Good'}, {'amount': 5, 'label':'Great'}],
  rate(amount) {
    if (this.rating == amount) {
      this.rating = 0;
    }
    else this.rating = amount;
  },
  currentLabel() {
     let r = this.rating;
    if (this.hoverRating != this.rating) r = this.hoverRating;
    let i = this.ratings.findIndex(e => e.amount == r);
    if (i >=0) {return this.ratings[i].label;} else {return ''};     
  }
}
"
      class="
        flex flex-col
        items-center
        justify-center
        space-y-2
        rounded
        m-2
        p-3
        mx-auto
      "
    >
      <div class="flex space-x-0">
        <template x-for="(star, index) in ratings" :key="index">
          <button
            @click="rate(star.amount)"
            @mouseover="hoverRating = star.amount"
            @mouseleave="hoverRating = rating"
            aria-hidden="true"
            :title="star.label"
            class="
              rounded-sm
              text-gray-400
              fill-current
              focus:outline-none
              focus:shadow-outline
              p-1
              w-12
              m-0
              cursor-pointer
            "
            :class="{'text-gray-600': hoverRating >= star.amount, 'text-yellow-400': rating >= star.amount && hoverRating >= star.amount}"
          >
            <svg
              class="w-15 transition duration-150"
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 20 20"
              fill="currentColor"
            >
              <path
                d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"
              />
            </svg>
          </button>
        </template>
      </div>
      <div class="p-2">
        <template x-if="rating || hoverRating">
          <p x-text="currentLabel()"></p>
        </template>
        <template x-if="!rating && !hoverRating">
          <p>Please Rate!</p>
        </template>
      </div>
    </div>
  </div>
</div>
