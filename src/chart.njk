---
title: Charts
eleventyExcludeFromCollections : true
---
{% extends "layouts/page.njk" %}
{% block head %}
  <link href="https://cdnjs.cloudflare.com/ajax/libs/flowbite/2.0.0/flowbite.min.css" rel="stylesheet"/>
{% endblock %}
{% block body %}
  <template x-if="$store.auth.user?.email === 'nicolas.sursock@gmail.com'">

    <div x-data="dataChart" class="mt-8 font-website container gap-2 flex flex-col sm:flex-row items-center justify-center">

      <div class="max-w-sm  w-full bg-white rounded-lg shadow dark:bg-gray-800 p-4 md:p-6">

        <div class="flex justify-between mb-3">
          <div class="flex justify-center items-center">
            <h5 class="text-xl font-bold leading-none text-gray-900 dark:text-white pr-1">Feedback analysis</h5>
            <svg data-popover-target="chart-info" data-popover-placement="bottom" class="w-3.5 h-3.5 text-gray-500 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white cursor-pointer ml-1" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
              <path d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5Zm0 16a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3Zm1-5.034V12a1 1 0 0 1-2 0v-1.418a1 1 0 0 1 1.038-.999 1.436 1.436 0 0 0 1.488-1.441 1.501 1.501 0 1 0-3-.116.986.986 0 0 1-1.037.961 1 1 0 0 1-.96-1.037A3.5 3.5 0 1 1 11 11.466Z"/>
            </svg>
            <div data-popover id="chart-info" role="tooltip" class="absolute z-10 invisible inline-block text-sm text-gray-500 transition-opacity duration-300 bg-white border border-gray-200 rounded-lg shadow-sm opacity-0 w-72 dark:bg-gray-800 dark:border-gray-600 dark:text-gray-400">
              <div class="p-3 space-y-2">
                <h3 class="font-semibold text-gray-900 dark:text-white">Activity growth - Incremental</h3>
                <p>Report helps navigate cumulative growth of community activities. Ideally, the chart should have a growing trend, as stagnating chart signifies a significant decrease of community activity.</p>
                <h3 class="font-semibold text-gray-900 dark:text-white">Calculation</h3>
                <p>For each date bucket, the all-time volume of activities is calculated. This means that activities in period n contain all activities up to period n, plus the activities generated by your community in period.</p>
                <a href="#" class="flex items-center font-medium text-blue-600 dark:text-blue-500 dark:hover:text-blue-600 hover:text-blue-700 hover:underline">Read more <svg class="w-2 h-2 ml-1.5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10">
                    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 9 4-4-4-4"/>
                  </svg>
                </a>
              </div>
              <div data-popper-arrow></div>
            </div>
          </div>
          <div>
            <button type="button" data-tooltip-target="data-tooltip" data-tooltip-placement="bottom" class="hidden sm:inline-flex items-center justify-center text-gray-500 w-8 h-8 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-none focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-700 rounded-lg text-sm">
              <svg class="w-3.5 h-3.5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 16 18">
                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 1v11m0 0 4-4m-4 4L4 8m11 4v3a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2v-3"/>
              </svg>
              <span class="sr-only">Download data</span>
            </button>
            <div id="data-tooltip" role="tooltip" class="absolute z-10 invisible inline-block px-3 py-2 text-sm font-medium text-white transition-opacity duration-300 bg-gray-900 rounded-lg shadow-sm opacity-0 tooltip dark:bg-gray-700">
            Download CSV
            <div class="tooltip-arrow" data-popper-arrow></div>
            </div>
          </div>
        </div>

        <div>
          <div class="flex" id="devices">
            <div class="flex items-center mr-4">
              <input id="desktop" type="checkbox" value="desktop" class="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
              <label for="desktop" class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Desktop</label>
            </div>
            <div class="flex items-center mr-4">
              <input id="tablet" type="checkbox" value="tablet" class="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
              <label for="tablet" class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Tablet</label>
            </div>
            <div class="flex items-center mr-4">
              <input id="mobile" type="checkbox" value="mobile" class="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
              <label for="mobile" class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Mobile</label>
            </div>
          </div>
        </div>

        <!-- Donut Chart -->
        <div class="py-6" id="donut-chart"></div>

        <div class="grid grid-cols-1 items-center border-gray-200 border-t dark:border-gray-700 justify-between">
          <div class="relative flex justify-between items-center pt-5">
            <!-- Button -->
            <button  @click="isOpen = !isOpen"
        id="dropdownDefaultButton"
        data-dropdown-toggle="lastDaysdropdown"
        data-dropdown-placement="bottom"
        class="text-sm font-medium text-gray-500 dark:text-gray-400 hover:text-gray-900 text-center inline-flex items-center dark:hover:text-white"
        type="button">
              <span x-text="dropdownOptions[selected].label"></span>
              <svg class="w-2.5 m-2.5 ml-1.5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 6">
                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 4 4 4-4"/>
              </svg>
            </button>
            <div @click.outside="isOpen = !isOpen" x-show="isOpen" id="lastDaysdropdown" class="bottom-0 absolute z-10 bg-white divide-y divide-gray-100 rounded-lg shadow w-44 dark:bg-gray-700">
              <ul class="py-2 text-sm text-gray-700 dark:text-gray-200" aria-labelledby="dropdownDefaultButton">
                <template x-for="(menu, index) in dropdownOptions" :key="menu.label">
                  <li>
                    <button @click="selected = index; isOpen = !isOpen; handleChange()" 
                    type="button" class="w-full text-left block px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white" x-text="menu.label"></button>
                  </li>
                </template>
              </ul>
            </div>
            <a
        href="#"
        class="uppercase text-sm font-semibold inline-flex items-center rounded-lg text-blue-600 hover:text-blue-700 dark:hover:text-blue-500  hover:bg-gray-100 dark:hover:bg-gray-700 dark:focus:ring-gray-700 dark:border-gray-700 px-3 py-2">
        Feedback analysis
        <svg class="w-2.5 h-2.5 ml-1.5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10">
                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 9 4-4-4-4"/>
              </svg>
            </a>
          </div>
        </div>
      </div>

    </div>

  </template>
  <template x-else>
    <div class="grid min-h-full place-items-center bg-white px-6 py-24 sm:py-32 lg:px-8 dark:bg-gray-900">
      <div class="text-center">
        <p class="text-base font-semibold text-indigo-600 dark:text-indigo-500">404</p>
        <h1 class="mt-4 text-3xl font-bold tracking-tight text-gray-900 dark:text-gray-100 sm:text-5xl">Page not found</h1>
        <p class="mt-6 text-base leading-7 text-gray-600 dark:text-gray-500">Sorry, we couldn’t find the page you’re looking for.</p>
        <div class="mt-10 flex items-center justify-center gap-x-6">
          <a href="/" class="rounded-md bg-indigo-600 px-3.5 py-2.5 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">Go back home</a>
          <a href="/contact" class="text-sm font-semibold text-gray-900 dark:text-gray-100">Contact support <span aria-hidden="true">&rarr;</span></a>
        </div>
      </div>
    </div>
  </template>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/flowbite/2.0.0/flowbite.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
  <script>
    function dataChart() {
      return {

        donutChart: null,
        chartOptions: null,
        items: [],
        sum: 0,
        isOpen: false,
        selected: 4,
        dropdownOptions: [
          {
            label: 'Today',
            range: [0, 1]
          }, {
            label: 'Yesterday',
            range: [-1, 0]
          }, {
            label: 'Last 7 days',
            range: [-6, 1]
          }, {
            label: 'Last 30 days',
            range: [-29, 1]
          }, {
            label: 'Last 90 days',
            range: [-89, 1]
          }
        ],
        async init() {
          await this.getData()

          this.chartOptions = {
            series: this
              .items
              .map((item) => item.value_abs),
            colors: [
              "#1C64F2", // Blue
              "#16BDCA", // Cyan
              "#9061F9", // Purple
              "#F2951A", // Orange
              "#E64848" // Red
            ],
            chart: {
              height: 320,
              width: "100%",
              type: "donut"
            },
            stroke: {
              colors: ["transparent"],
              lineCap: ""
            },
            plotOptions: {
              pie: {
                donut: {
                  labels: {
                    show: true,
                    name: {
                      show: true,
                      fontFamily: "Aldrich, sans-serif",
                      offsetY: 20
                    },
                    total: {
                      showAlways: true,
                      show: true,
                      label: "reasons",
                      fontFamily: "Aldrich, sans-serif",
                      formatter: function (w) {
                        const sum = w
                          .globals
                          .seriesTotals
                          .reduce((a, b) => {
                            return a + b
                          }, 0)
                        return `${sum}`
                      }
                    },
                    value: {
                      show: true,
                      fontFamily: "Aldrich, sans-serif",
                      offsetY: -20,
                      formatter: function (value) {
                        return value
                      }
                    }
                  },
                  size: "55%"
                }
              }
            },
            grid: {
              padding: {
                top: -2
              }
            },
            labels: this
              .items
              .map((item) => item.label),
            dataLabels: {
              enabled: true,
              formatter: function (val) {
                return val.toFixed(1) + "%"
              }
            },
            legend: {
              position: "bottom",
              fontFamily: "Aldrich, sans-serif"
            },
            yaxis: {
              labels: {
                formatter: function (value) {
                  return value
                }
              }
            },
            xaxis: {
              labels: {
                formatter: function (value) {
                  return value
                }
              },
              axisTicks: {
                show: false
              },
              axisBorder: {
                show: false
              }
            }
          }

          if (document.getElementById("donut-chart") && typeof ApexCharts !== 'undefined') {
            this.donutChart = new ApexCharts(document.getElementById("donut-chart"), this.chartOptions);
            this
              .donutChart
              .render();
          }
        },

        async handleChange() {
          /*console.log('Before updating:');
          console.log('Series:', this.donutChart.w.globals.series);
          console.log('Labels:', this.chartOptions.labels);*/

          await this.getData();

         
          this.chartOptions.series = this.items.map((item) => item.value_abs);
            
          this.chartOptions.labels = this
            .items
            .map((item) => item.label);
          this
            .donutChart
            .updateOptions(this.chartOptions);

/*          console.log('After updating:');
          console.log('Series:', this.donutChart.w.globals.series);
          console.log('Labels:', this.chartOptions.labels);

          console.log('Chart updated.');*/
        },

        async getData() {
          // Define the URL of the API endpoint you want to fetch data from
          const apiUrl = '/api/feedback?mode=view'; // Replace with your API endpoint URL

          try {
            // Make a fetch request to the API endpoint
            const response = await fetch(apiUrl, {
              method: 'POST',
              body: JSON.stringify(this.dropdownOptions[this.selected])
            })

            if (!response.ok) {
              // Handle API request errors
              throw new Error(`API request failed with status ${response.status}`);
            }
            const data = await response.json(); // Parse the response as JSON

            // Use the fetched data
            const groupedData = data.reduce((acc, item) => {
              const {reason_label, reason_description} = item;
              acc[reason_label] = acc[reason_label] || {
                count: 0,
                label: reason_label,
                description: reason_description
              };
              acc[reason_label].count++;
              return acc;
            }, {});

            this.items = Object
              .entries(groupedData)
              .map(([label, item]) => ({
                label,
                value_abs: item.count,
                value: parseFloat((item.count / data.length * 100).toFixed(1)),
                tooltip: item.description
              }));

          } catch (e) {
            console.error('Error: ', e.message);
          }
        }

      }
    };
  </script>

{% endblock %}